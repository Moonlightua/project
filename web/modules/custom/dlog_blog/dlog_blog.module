<?php

/**
 * @file
 * Primary module hooks for DLOG - Article module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function dlog_blog_theme($existing, $type, $theme, $path) {
  return [
    'dlog_blog_related_posts' =>[
      'variables' => [
        'max' => 4,
        'max_exact_same_tags' =>2,
      ],
      'file' => 'dlog_blog.theme.inc',
    ],
    'dlog_blog_random_posts' => [
      'variables' => [],
      'file' => 'dlog_blog.theme.inc',
    ],
  ];

}

/**
 * Implements hook_entity_extra_field_info().
 */
function dlog_blog_entity_extra_field_info() {
  $extra = [];

    $extra['node']['article']['display']['estimated_read_time'] = [
      'label' => t('Estimated read time'),
      'weight' => 100,
      'visible' => FALSE,
    ];

  $extra['node']['article']['display']['previous_next_article'] = [
    'label' => t('Buttons to previous and next blog article'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['article']['display']['social_share'] = [
    'label' => t('Links for sharing article'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['article']['display']['related_posts'] = [
    'label' => t('Related posts'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['article']['display']['random_posts'] = [
    'label' => t('Random posts'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function test_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('social_share')) {
    $build['social_share'] = [
      '#theme' => 'test_social_share',
      '#url' => $node->toUrl('canonical',['absolute' => TRUE])->toString('TRUE')->getGeneratedUrl(),
      '#label' => $node->label(),
    ];
  }
/*
  if ($display->getComponent('related_posts')) {
    $build['related_posts'] = [
      '#theme' => 'dlog_blog_related_posts'
    ];
  }

  if ($display->getComponent('random_posts')) {
    $build['random_posts'] = [
      '#create_placeholder' => TRUE,
      '#lazy_builder' => [
        'dlog_blog.lazy_builder:randomBlogPosts', [],
      ],
    ];
  }
*/
}

/**
 * Calculates estimated read time for article.
 *
 * @param \Drupal\paragraphs\ParagraphInterface $paragraphs
 *
 * @return float
 *  The estimated time in minutes.
 */
function _dlog_blog_estimated_read_time (array $paragraphs){
  $word_per_minute = 143;
  $estimated_time = 0;
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraphs as $paragraph){
    switch($paragraph->bundle()){

      case 'text':
        $word_count = str_word_count(strip_tags($paragraph->get('field_content')->value));
        $estimated_time += floor(($word_count/$word_per_minute) * 60);
      break;

      case 'gallery_images':
      case 'image':
        $estimated_time += 10;
      break;

      case 'code':
        $word_count = str_word_count(strip_tags($paragraph->get('field_content')->value));
        $estimated_time += floor(($word_count/($word_per_minute / 3)) * 60);
      break;
    }
  }

  return ceil($estimated_time/60);
}
